plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
	id 'com.gradleup.shadow' version "9.0.0-rc1"
}

version = project.mod_version
group = project.maven_group

configurations {
	shadowMe
}

base {
	archivesName = project.archives_base_name
}

repositories {
	maven {
		url = "https://maven.isxander.dev/releases"

		content {
			includeGroup "dev.isxander"
			includeGroup "org.quiltmc.parsers"
		}
	}

	maven {
		url = "https://maven.notenoughupdates.org/releases"

		content {
			includeGroup "org.notenoughupdates.moulconfig"
		}
	}

	//mavenLocal()
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	//YACL
	modImplementation("dev.isxander:yet-another-config-lib:${project.yacl_version}-fabric")

	//MoulConfig
	shadowMe(modImplementation("org.notenoughupdates.moulconfig:${project.moulconfig_flavour}:${project.moulconfig_version}"))
}

loom {
	accessWidenerPath = file("src/main/resources/dandelion.accesswidener")

	mixin {
		useLegacyMixinAp = false
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

tasks.named("shadowJar").configure {
	configurations = [project.configurations.shadowMe]

	relocate("io.github.notenoughupdates.moulconfig", "net.azureaaron.dandelion.deps.moulconfig")
	exclude("fabric.mod.json")
	exclude("*.accesswidener")
	exclude("LICENSE")
	mergeServiceFiles()
}

//Adds our original FMJ, AW, and license into the shadow jar (to overwrite the MoulConfig ones)
task mergeResourcesIntoShadowJar(type: Copy) {
	dependsOn(tasks.shadowJar, processResources, jar)

	def shadowJarFile = tasks.shadowJar.archiveFile.get().asFile
	def tempDir = new File(buildDir, "tmp/shadowResources")

	duplicatesStrategy = DuplicatesStrategy.EXCLUDE 

	doFirst {
		tempDir.deleteDir()
		tempDir.mkdirs()
	}

	from(zipTree(shadowJarFile))

	from(tasks.processResources.destinationDir) {
		include("fabric.mod.json", "*.accesswidener")
	}

	from('.') {
		include("LICENSE")
	}

	into(tempDir)

	doLast {
		ant.jar(destfile: shadowJarFile) {
			fileset(dir: tempDir)
		}

		tempDir.deleteDir()
	}
}

tasks.named("remapJar").configure {
	dependsOn(mergeResourcesIntoShadowJar)
	inputFile.set(tasks.named("shadowJar").flatMap { it.archiveFile } )
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			groupId = "net.azureaaron"
			artifactId = project.archives_base_name
			from components.java
		}
	}

	repositories {
		maven {
			url = "https://maven.azureaaron.net/releases"

			credentials(PasswordCredentials) {
				username = System.getenv("AARON_MAVEN_USER");
				password = System.getenv("AARON_MAVEN_PASS");
			}
		}
	}
}